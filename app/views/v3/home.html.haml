:coffeescript
    $ ->
        pinch = new Hammer.Pinch()
        rotate = new Hammer.Rotate()
        pinch.recognizeWith(rotate)

        square = $('#touch-square')[0]

        mc = Hammer square
        mc.add [pinch, rotate]
        
        mc.get('pinch').set
            enable: true
        mc.get('rotate').set
            enable: true

        mc.on 'pinch', (ev) ->
            console.log 'pinch'
            ev.preventDefault()
            console.log ev
            $('#touch-square').css 'transform', 'scale(' + ev.scale + ')'
        
        mc.on 'pinch rotate', (ev) ->
            ev.preventDefault()
            console.log ev
            $('#touch-square').css 
                '-webkit-transform': 'scale(' + ev.scale + ') rotate(' + ev.angle + 'deg)'
                'transform': 'scale(' + ev.scale + ') rotate(' + ev.angle + 'deg)'
        
        mc.on 'tap', (ev) ->
            console.log 'tap'
            ev.preventDefault()
            $('#touch-square').animate {
                width: '100px'
                height: '100px'
            },
                duration: 100
                done: ->
                    $('#touch-square').animate {
                        width: '150px'
                        height: '150px'
                    }, 100
                    return
            

        mc.on 'rotate', (ev) ->
            ev.preventDefault()
            squ = $('#touch-square')
            squ.css 'transform', 'rotate(' + ev.angle + 'deg)'

        mc.on 'press', (ev) ->
            console.log 'press'
            ev.preventDefault()
            squ = $('#touch-square')
            if squ.css('background-color') == 'rgb(255, 0, 0)'
                squ.css('background-color', 'blue')
            else if squ.css('background-color') == 'rgb(0, 0, 255)'
                squ.css('background-color', 'white')
            else
                squ.css('background-color', 'red')

        mc.on 'pan', (ev) ->
            console.log 'pan'
            
            $('#touch-square').css
                left: (ev.center.x) + 'px'
                top: (ev.center.y) + 'px'
            
        mc.on 'swipe', (ev) ->
            console.log 'swipe'
            ev.preventDefault()
            
            $('#touch-square').animate {
                left: (ev.center.x + ev.deltaX) + 'px'
                top: (ev.center.y + ev.deltaY) + 'px'
            },
                duration: 1000
                done: ->
                    $('#touch-square').animate {
                        left: ev.center.x  + 'px'
                        top: ev.center.y + 'px'
                    }, 1000
                    return
            
#touchpad
    #touch-square
    
// IGNORE, BUT KEEP THIS LINE (Back button)   
= render :partial => "application/back_to_root"
    
:scss
    $touchpad-bg: desaturate(green, 70%);
    $touch-square: lighten($touchpad-bg, 70%);
    #touchpad{
        position: relative;
        height: 100%;
        width: 100%;
        color: white;
        font-family: Avenir, sans-serif;
        font-size: 4em;
        text-align: center;
            
        background: $touchpad-bg;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        #touch-square{
            position: absolute;
            left: 40%;
            top: 40%;
            width: 150px;
            height: 150px;
            background: $touch-square;
        }
    }
    #back-button{
        position: absolute;
        z-index: 100;
        top: 15px;
        left: 15px;
    }
    
